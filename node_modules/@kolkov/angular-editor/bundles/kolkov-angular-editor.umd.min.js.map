{"version":3,"sources":["ng://@kolkov/angular-editor/lib/angular-editor.service.ts","ng://@kolkov/angular-editor/lib/config.ts","ng://@kolkov/angular-editor/lib/angular-editor-toolbar.component.ts","ng://@kolkov/angular-editor/lib/angular-editor.component.ts","ng://@kolkov/angular-editor/lib/angular-editor.module.ts"],"names":["AngularEditorService","http","_document","this","prototype","executeCommand","command","includes","execCommand","createLink","url","newUrl","selectedText","insertHtml","insertColor","color","where","restoreSelection","setFontName","fontName","setFontSize","fontSize","html","Error","saveSelection","window","getSelection","sel","getRangeAt","rangeCount","savedSelection","toString","createRange","document","removeAllRanges","addRange","checkSelection","length","uploadImage","file","uploadData","FormData","append","name","post","uploadUrl","reportProgress","observe","insertImage","imageUrl","setDefaultParagraphSeparator","separator","createCustomClass","customClass","newTag","tagName","tag","class","Injectable","args","providedIn","HttpClient","Inject","DOCUMENT","angularEditorConfig","editable","spellcheck","height","minHeight","maxHeight","width","minWidth","translate","enableToolbar","showToolbar","placeholder","defaultParagraphSeparator","defaultFontName","defaultFontSize","fonts","AngularEditorToolbarComponent","_renderer","editorService","id","htmlMode","block","fontId","customClassId","tagMap","BLOCKQUOTE","A","select","buttons","execute","EventEmitter","triggerCommand","emit","triggerButtons","_this","forEach","e","result","queryCommandState","elementById","getElementById","addClass","removeClass","triggerBlocks","nodes","found","y","node","find","x","nodeName","undefined","toLowerCase","index","HTMLFontElement","face","defaultFontId","customClasses","Element","className","Object","keys","map","insertUrl","prompt","setEditorMode","m","toggleEditorModeButton","onFileChanged","event","target","files","type","subscribe","HttpResponse","body","fileReset","reader","FileReader","onload","_event","readAsDataURL","myInputFile","nativeElement","value","setCustomClass","classId","Component","selector","template","Renderer2","Output","ViewChild","AngularEditorComponent","modeVisual","showPlaceholder","config","viewMode","blur","focus","ngOnInit","editorToolbar","ngAfterContentInit","findIndex","onEditorFocus","toggleEditorMode","exec","onTextAreaFocus","onTextAreaBlur","onTouched","relatedTarget","parentElement","textArea","onContentChange","onChange","togglePlaceholder","registerOnChange","fn","registerOnTouched","writeValue","refreshView","normalizedValue","setProperty","editorWrapper","setDisabledState","isDisabled","div","action","bToSource","oContent","editableElement","createTextNode","innerHTML","oPre","createElement","setAttribute","oCode","contentEditable","appendChild","all","innerText","selectNodeContents","firstChild","userSelection","a","focusNode","els","unshift","parentNode","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","Input","AngularEditorModule","NgModule","imports","CommonModule","FormsModule","ReactiveFormsModule","declarations","exports"],"mappings":"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","sourcesContent":["import {Inject, Injectable} from '@angular/core';\r\nimport {HttpClient, HttpEvent} from \"@angular/common/http\";\r\nimport {Observable} from \"rxjs\";\r\nimport {DOCUMENT} from \"@angular/common\";\r\nimport {CustomClass} from \"./config\";\r\n\r\nexport interface UploadResponse {\r\n  imageUrl: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AngularEditorService {\r\n\r\n  savedSelection: Range | null;\r\n  selectedText: string;\r\n  uploadUrl: string;\r\n\r\n\r\n  constructor(private http: HttpClient, @Inject(DOCUMENT) private _document: any) {\r\n  }\r\n\r\n  /**\r\n   * Executed command from editor header buttons exclude toggleEditorMode\r\n   * @param command string from triggerCommand\r\n   */\r\n  executeCommand(command: string) {\r\n    const commands = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p', 'pre'];\r\n    if (commands.includes(command)) {\r\n      this._document.execCommand('formatBlock', false, command);\r\n    }\r\n\r\n    this._document.execCommand(command, false, null);\r\n  }\r\n\r\n  /**\r\n   * Create URL link\r\n   * @param url string from UI prompt\r\n   */\r\n  createLink(url: string) {\r\n    if (!url.includes(\"http\")) {\r\n      this._document.execCommand('createlink', false, url);\r\n    } else {\r\n      const newUrl = '<a href=\"' + url + '\" target=\"_blank\">' + this.selectedText + '</a>';\r\n      this.insertHtml(newUrl);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * insert color either font or background\r\n   *\r\n   * @param color color to be inserted\r\n   * @param where where the color has to be inserted either text/background\r\n   */\r\n  insertColor(color: string, where: string): void {\r\n    const restored = this.restoreSelection();\r\n    if (restored) {\r\n      if (where === 'textColor') {\r\n        this._document.execCommand('foreColor', false, color);\r\n      } else {\r\n        this._document.execCommand('hiliteColor', false, color);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set font name\r\n   * @param fontName string\r\n   */\r\n  setFontName(fontName: string) {\r\n    this._document.execCommand(\"fontName\", false, fontName);\r\n  }\r\n\r\n  /**\r\n   * Set font size\r\n   * @param fontSize string\r\n   */\r\n  setFontSize(fontSize: string) {\r\n    this._document.execCommand(\"fontSize\", false, fontSize);\r\n  }\r\n\r\n  /**\r\n   * Create raw HTML\r\n   * @param html HTML string\r\n   */\r\n  private insertHtml(html: string): void {\r\n\r\n    const isHTMLInserted = this._document.execCommand('insertHTML', false, html);\r\n\r\n    if (!isHTMLInserted) {\r\n      throw new Error('Unable to perform the operation');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * save selection when the editor is focussed out\r\n   */\r\n  saveSelection(): any {\r\n    if (window.getSelection) {\r\n      const sel = window.getSelection();\r\n      if (sel.getRangeAt && sel.rangeCount) {\r\n        this.savedSelection = sel.getRangeAt(0);\r\n        this.selectedText = sel.toString();\r\n      }\r\n    } else if (this._document.getSelection && this._document.createRange) {\r\n      this.savedSelection = document.createRange();\r\n    } else {\r\n      this.savedSelection = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * restore selection when the editor is focussed in\r\n   *\r\n   * saved selection when the editor is focussed out\r\n   */\r\n  restoreSelection(): boolean {\r\n    if (this.savedSelection) {\r\n      if (window.getSelection) {\r\n        const sel = window.getSelection();\r\n        sel.removeAllRanges();\r\n        sel.addRange(this.savedSelection);\r\n        return true;\r\n      } else if (this._document.getSelection /*&& this.savedSelection.select*/) {\r\n        // this.savedSelection.select();\r\n        return true;\r\n      }\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /** check any slection is made or not */\r\n  private checkSelection(): any {\r\n\r\n    const slectedText = this.savedSelection.toString();\r\n\r\n    if (slectedText.length === 0) {\r\n      throw new Error('No Selection Made');\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Upload file to uploadUrl\r\n   * @param file\r\n   */\r\n  uploadImage(file: File): Observable<HttpEvent<UploadResponse>> {\r\n\r\n    const uploadData: FormData = new FormData();\r\n\r\n    uploadData.append('file', file, file.name);\r\n\r\n    return this.http.post<UploadResponse>(this.uploadUrl, uploadData, {\r\n      reportProgress: true,\r\n      observe: 'events',\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Insert image with Url\r\n   * @param imageUrl\r\n   */\r\n  insertImage(imageUrl: string) {\r\n    this._document.execCommand('insertImage', false, imageUrl);\r\n  }\r\n\r\n  setDefaultParagraphSeparator(separator: string) {\r\n    this._document.execCommand(\"defaultParagraphSeparator\", false, separator);\r\n  }\r\n\r\n  createCustomClass(customClass: CustomClass) {\r\n    let newTag = this.selectedText;\r\n    if(customClass){\r\n      const tagName = customClass.tag ? customClass.tag : 'span';\r\n      newTag = '<' + tagName + ' class=\"' + customClass.class + '\">' + this.selectedText + '</' + tagName + '>';\r\n    }\r\n    \r\n    this.insertHtml(newTag);\r\n  }\r\n}\r\n","export interface CustomClass {\r\n  name: string;\r\n  class: string;\r\n  tag?: string;\r\n}\r\n\r\nexport interface Font {\r\n  name: string;\r\n  class: string;\r\n}\r\n\r\nexport interface AngularEditorConfig {\r\n  editable?: boolean;\r\n  spellcheck?: boolean;\r\n  height?: 'auto' | string;\r\n  minHeight?: '0' | string;\r\n  maxHeight?: 'auto' | string;\r\n  width?: 'auto' | string;\r\n  minWidth?: '0' | string;\r\n  translate?: 'yes' | 'now' | string;\r\n  enableToolbar?: boolean;\r\n  showToolbar?: boolean;\r\n  placeholder?: string;\r\n  defaultParagraphSeparator?: string;\r\n  defaultFontName?: string;\r\n  defaultFontSize?: '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | string;\r\n  uploadUrl?: string;\r\n  fonts?: Font[];\r\n  customClasses?: CustomClass[];\r\n}\r\n\r\nexport const angularEditorConfig: AngularEditorConfig = {\r\n  editable: true,\r\n  spellcheck: true,\r\n  height: 'auto',\r\n  minHeight: '0',\r\n  maxHeight: 'auto',\r\n  width: 'auto',\r\n  minWidth: '0',\r\n  translate: 'yes',\r\n  enableToolbar: true,\r\n  showToolbar: true,\r\n  placeholder: 'Enter text here...',\r\n  defaultParagraphSeparator: '',\r\n  defaultFontName: '',\r\n  defaultFontSize: '',\r\n  fonts: [\r\n    {class: 'arial', name: 'Arial'},\r\n    {class: 'times-new-roman', name: 'Times New Roman'},\r\n    {class: 'calibri', name: 'Calibri'},\r\n    {class: 'comic-sans-ms', name: 'Comic Sans MS'}\r\n  ],\r\n  uploadUrl: 'v1/image',\r\n};\r\n","import {Component, ElementRef, EventEmitter, Inject, Output, Renderer2, ViewChild} from \"@angular/core\";\r\nimport {AngularEditorService} from \"./angular-editor.service\";\r\nimport {HttpResponse} from \"@angular/common/http\";\r\nimport {DOCUMENT} from \"@angular/common\";\r\nimport {CustomClass, Font} from \"./config\";\r\n\r\n@Component({\r\n  selector: 'angular-editor-toolbar',\r\n  templateUrl: './angular-editor-toolbar.component.html',\r\n  styleUrls: ['./angular-editor-toolbar.component.scss']\r\n})\r\n\r\nexport class AngularEditorToolbarComponent {\r\n  id = '';\r\n  htmlMode = false;\r\n  showToolbar = true;\r\n\r\n  block = 'default';\r\n  defaultFontId;\r\n  fontId = 0;\r\n  fontSize = '5';\r\n  fonts: Font[];\r\n\r\n  customClassId = -1;\r\n  customClasses: CustomClass[];\r\n  uploadUrl:string;\r\n\r\n  tagMap = {\r\n    BLOCKQUOTE: \"indent\",\r\n    A: \"link\"\r\n  };\r\n\r\n  select = [\"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\", \"P\", \"PRE\", \"DIV\"];\r\n\r\n  buttons = [\"bold\", \"italic\", \"underline\", \"strikeThrough\", \"subscript\", \"superscript\", \"justifyLeft\", \"justifyCenter\",\r\n    \"justifyRight\", \"justifyFull\", \"indent\", \"outdent\", \"insertUnorderedList\", \"insertOrderedList\", \"link\"];\r\n\r\n  @Output() execute: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n  @ViewChild('fileInput') myInputFile: ElementRef;\r\n\r\n  constructor(private _renderer: Renderer2,\r\n              private editorService: AngularEditorService, @Inject(DOCUMENT) private _document: any) {\r\n  }\r\n\r\n  /**\r\n   * Trigger command from editor header buttons\r\n   * @param command string from toolbar buttons\r\n   */\r\n  triggerCommand(command: string) {\r\n    this.execute.emit(command);\r\n  }\r\n\r\n  /**\r\n   * highlight editor buttons when cursor moved or positioning\r\n   */\r\n  triggerButtons() {\r\n    if (!this.showToolbar) {\r\n      return;\r\n    }\r\n    this.buttons.forEach(e => {\r\n      const result = this._document.queryCommandState(e);\r\n      const elementById = this._document.getElementById(e + '-' + this.id);\r\n      if (result) {\r\n        this._renderer.addClass(elementById, \"active\");\r\n      } else {\r\n        this._renderer.removeClass(elementById, \"active\");\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * trigger highlight editor buttons when cursor moved or positioning in block\r\n   */\r\n  triggerBlocks(nodes: Node[]) {\r\n    if (!this.showToolbar) {\r\n      return;\r\n    }\r\n    let found = false;\r\n    this.select.forEach(y => {\r\n      const node = nodes.find(x => x.nodeName === y);\r\n      if (node !== undefined && y === node.nodeName) {\r\n        if (found === false) {\r\n          this.block = node.nodeName.toLowerCase();\r\n          found = true;\r\n        }\r\n      } else if (found === false) {\r\n        this.block = 'default';\r\n      }\r\n    });\r\n\r\n    found = false;\r\n    if (this.fonts) {\r\n      this.fonts.forEach((y, index) => {\r\n        const node = nodes.find(x => {\r\n          if (x instanceof HTMLFontElement) {\r\n            return x.face === y.name;\r\n          }\r\n        });\r\n        if (node !== undefined) {\r\n          if (found === false) {\r\n            this.fontId = index;\r\n            found = true;\r\n          }\r\n        } else if (found === false) {\r\n          this.fontId = this.defaultFontId;\r\n        }\r\n      });\r\n    }\r\n\r\n    found = false;\r\n    if (this.customClasses) {\r\n      this.customClasses.forEach((y, index) => {\r\n        const node = nodes.find(x => {\r\n          if (x instanceof Element) {\r\n            return x.className === y.class;\r\n          }\r\n        });\r\n        if (node !== undefined) {\r\n          if (found === false) {\r\n            this.customClassId = index;\r\n            found = true;\r\n          }\r\n        } else if (found === false) {\r\n          this.customClassId = -1;\r\n        }\r\n      });\r\n    }\r\n\r\n    Object.keys(this.tagMap).map(e => {\r\n      const elementById = this._document.getElementById(this.tagMap[e] + '-' + this.id);\r\n      const node = nodes.find(x => x.nodeName === e);\r\n      if (node !== undefined && e === node.nodeName) {\r\n        this._renderer.addClass(elementById, \"active\");\r\n      } else {\r\n        this._renderer.removeClass(elementById, \"active\");\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * insert URL link\r\n   */\r\n  insertUrl() {\r\n    const url = prompt(\"Insert URL link\", 'http:\\/\\/');\r\n    if (url && url !== '' && url !== 'http://') {\r\n      this.editorService.createLink(url);\r\n    }\r\n  }\r\n\r\n  /** insert color */\r\n  insertColor(color: string, where: string) {\r\n    this.editorService.insertColor(color, where);\r\n    this.execute.emit(\"\");\r\n  }\r\n\r\n  /**\r\n   * set font Name/family\r\n   * @param fontId number\r\n   */\r\n  setFontName(fontId: number): void {\r\n    this.editorService.setFontName(this.fonts[fontId].name);\r\n    this.execute.emit(\"\");\r\n  }\r\n\r\n  /**\r\n   * set font Size\r\n   * @param fontSize string\r\n   *  */\r\n  setFontSize(fontSize: string): void {\r\n    this.editorService.setFontSize(fontSize);\r\n    this.execute.emit(\"\");\r\n  }\r\n\r\n  /**\r\n   * toggle editor mode (WYSIWYG or SOURCE)\r\n   * @param m boolean\r\n   */\r\n  setEditorMode(m: boolean) {\r\n    const toggleEditorModeButton = this._document.getElementById(\"toggleEditorMode\" + '-' + this.id);\r\n    if (m) {\r\n      this._renderer.addClass(toggleEditorModeButton, \"active\");\r\n    } else {\r\n      this._renderer.removeClass(toggleEditorModeButton, \"active\");\r\n    }\r\n    this.htmlMode = m;\r\n  }\r\n\r\n  /**\r\n   * Upload image when file is selected\r\n   */\r\n  onFileChanged(event) {\r\n    const file = event.target.files[0];\r\n      if (file.type.includes(\"image/\")) {\r\n        if(this.uploadUrl){\r\n            this.editorService.uploadImage(file).subscribe(e => {\r\n              if (e instanceof HttpResponse) {\r\n                this.editorService.insertImage(e.body.imageUrl);\r\n                this.fileReset();\r\n              }\r\n            });\r\n        } else{\r\n          var reader = new FileReader();\r\n          reader.onload = (_event) => {\r\n            this.editorService.insertImage(_event.target['result']);\r\n          }\r\n          reader.readAsDataURL(file);\r\n        }\r\n      }\r\n  }\r\n\r\n  /**\r\n   * Reset Input\r\n   */\r\n  fileReset() {\r\n    this.myInputFile.nativeElement.value = \"\";\r\n  }\r\n\r\n  /**\r\n   * Set custom class\r\n   */\r\n  setCustomClass(classId: number) {\r\n    this.editorService.createCustomClass(this.customClasses[classId]);\r\n  }\r\n}\r\n","import {\r\n  AfterContentInit,\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  Renderer2,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from \"@angular/forms\";\r\nimport {AngularEditorConfig, angularEditorConfig} from \"./config\";\r\nimport {AngularEditorToolbarComponent} from \"./angular-editor-toolbar.component\";\r\nimport {AngularEditorService} from \"./angular-editor.service\";\r\nimport {DOCUMENT} from \"@angular/common\";\r\n\r\n@Component({\r\n  selector: 'angular-editor',\r\n  templateUrl: \"./angular-editor.component.html\",\r\n  styleUrls: [\"./angular-editor.component.scss\"],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => AngularEditorComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class AngularEditorComponent implements OnInit, ControlValueAccessor, AfterContentInit {\r\n\r\n  private onChange: (value: string) => void;\r\n  private onTouched: () => void;\r\n\r\n  placeholder: boolean;\r\n\r\n  modeVisual = true;\r\n  showPlaceholder = false;\r\n  @Input() id = '';\r\n  @Input() config: AngularEditorConfig = angularEditorConfig;\r\n\r\n  @Output() html;\r\n\r\n  @ViewChild('editor') textArea: any;\r\n  @ViewChild('editorWrapper') editorWrapper: any;\r\n  @ViewChild('editorToolbar') editorToolbar: AngularEditorToolbarComponent;\r\n\r\n  @Output() viewMode = new EventEmitter<boolean>();\r\n\r\n  /** emits `blur` event when focused out from the textarea */\r\n  @Output() blur: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n  /** emits `focus` event when focused in to the textarea */\r\n  @Output() focus: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n  constructor(private _renderer: Renderer2, private editorService: AngularEditorService, @Inject(DOCUMENT) private _document: any) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.editorToolbar.id = this.id;\r\n    this.editorToolbar.fonts = this.config.fonts ? this.config.fonts : angularEditorConfig.fonts;\r\n    this.editorToolbar.customClasses = this.config.customClasses;\r\n    this.editorToolbar.uploadUrl = this.config.uploadUrl;\r\n    this.editorService.uploadUrl = this.config.uploadUrl;\r\n    if (this.config.showToolbar !== undefined) {\r\n      this.editorToolbar.showToolbar = this.config.showToolbar;\r\n    }\r\n    if (this.config.defaultParagraphSeparator) {\r\n      this.editorService.setDefaultParagraphSeparator(this.config.defaultParagraphSeparator);\r\n    }\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    if (this.config.defaultFontName) {\r\n      this.editorToolbar.defaultFontId = this.config.defaultFontName ? this.editorToolbar.fonts.findIndex(x => {\r\n        return x.name === this.config.defaultFontName;\r\n      }) : 0;\r\n      this.editorToolbar.fontId = this.editorToolbar.defaultFontId;\r\n      this.onEditorFocus();\r\n      this.editorService.setFontName(this.config.defaultFontName);\r\n    } else {\r\n      this.editorToolbar.defaultFontId = 0;\r\n      this.editorToolbar.fontId = 0;\r\n    }\r\n    if (this.config.defaultFontSize) {\r\n      this.editorToolbar.fontSize = this.config.defaultFontSize;\r\n      this.onEditorFocus();\r\n      this.editorService.setFontSize(this.config.defaultFontSize);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executed command from editor header buttons\r\n   * @param command string from triggerCommand\r\n   */\r\n  executeCommand(command: string) {\r\n    if (command === 'toggleEditorMode') {\r\n      this.toggleEditorMode(this.modeVisual);\r\n    } else if (command !== '') {\r\n      this.editorService.executeCommand(command);\r\n      this.exec();\r\n    }\r\n\r\n    this.onEditorFocus();\r\n  }\r\n\r\n  /**\r\n   * focus event\r\n   */\r\n  onTextAreaFocus(): void {\r\n    this.focus.emit('focus');\r\n  }\r\n\r\n  /**\r\n   * blur event\r\n   */\r\n  onTextAreaBlur(event: FocusEvent) {\r\n    /**\r\n     * save selection if focussed out\r\n     */\r\n    this.editorService.saveSelection();\r\n\r\n    if (typeof this.onTouched === 'function') {\r\n      this.onTouched();\r\n    }\r\n\r\n    if (event.relatedTarget != null && (event.relatedTarget as HTMLElement).parentElement.className !== 'angular-editor-toolbar-set') {\r\n      this.blur.emit('blur');\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  focus the text area when the editor is focussed\r\n   */\r\n  onEditorFocus() {\r\n    this.textArea.nativeElement.focus();\r\n  }\r\n\r\n  /**\r\n   * Executed from the contenteditable section while the input property changes\r\n   * @param html html string from contenteditable\r\n   */\r\n  onContentChange(html: string): void {\r\n\r\n    if (typeof this.onChange === 'function') {\r\n      this.onChange(html);\r\n      if ((!html || html === '<br>' || html === '') !== this.showPlaceholder) {\r\n        this.togglePlaceholder(this.showPlaceholder);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the function to be called\r\n   * when the control receives a change event.\r\n   *\r\n   * @param fn a function\r\n   */\r\n  registerOnChange(fn: any): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  /**\r\n   * Set the function to be called\r\n   * when the control receives a touch event.\r\n   *\r\n   * @param fn a function\r\n   */\r\n  registerOnTouched(fn: any): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  /**\r\n   * Write a new value to the element.\r\n   *\r\n   * @param value value to be executed when there is a change in contenteditable\r\n   */\r\n  writeValue(value: any): void {\r\n\r\n    if ((!value || value === '<br>' || value === '') !== this.showPlaceholder) {\r\n      this.togglePlaceholder(this.showPlaceholder);\r\n    }\r\n\r\n    if (value === null || value === undefined || value === '' || value === '<br>') {\r\n      value = null;\r\n    }\r\n\r\n    this.refreshView(value);\r\n  }\r\n\r\n  /**\r\n   * refresh view/HTML of the editor\r\n   *\r\n   * @param value html string from the editor\r\n   */\r\n  refreshView(value: string): void {\r\n    const normalizedValue = value === null ? '' : value;\r\n    this._renderer.setProperty(this.textArea.nativeElement, 'innerHTML', normalizedValue);\r\n\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * toggles placeholder based on input string\r\n   *\r\n   * @param value A HTML string from the editor\r\n   */\r\n  togglePlaceholder(value: boolean): void {\r\n    if (!value) {\r\n      this._renderer.addClass(this.editorWrapper.nativeElement, 'show-placeholder');\r\n      this.showPlaceholder = true;\r\n\r\n    } else {\r\n      this._renderer.removeClass(this.editorWrapper.nativeElement, 'show-placeholder');\r\n      this.showPlaceholder = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Implements disabled state for this element\r\n   *\r\n   * @param isDisabled\r\n   */\r\n  setDisabledState(isDisabled: boolean): void {\r\n    const div = this.textArea.nativeElement;\r\n    const action = isDisabled ? 'addClass' : 'removeClass';\r\n    this._renderer[action](div, 'disabled');\r\n  }\r\n\r\n  /**\r\n   * toggles editor mode based on bToSource bool\r\n   *\r\n   * @param bToSource A boolean value from the editor\r\n   */\r\n  toggleEditorMode(bToSource: boolean) {\r\n    let oContent: any;\r\n    const editableElement = this.textArea.nativeElement;\r\n\r\n    if (bToSource) {\r\n      oContent = this._document.createTextNode(editableElement.innerHTML);\r\n      editableElement.innerHTML = '';\r\n\r\n      const oPre = this._document.createElement('pre');\r\n      oPre.setAttribute(\"style\", \"margin: 0; outline: none;\");\r\n      const oCode = this._document.createElement('code');\r\n      editableElement.contentEditable = false;\r\n      oCode.id = \"sourceText\";\r\n      oCode.setAttribute(\"style\", \"white-space: pre-wrap; word-break: keep-all; margin: 0; outline: none; background-color: #fff5b9;\");\r\n      oCode.contentEditable = 'true';\r\n      oCode.appendChild(oContent);\r\n      oPre.appendChild(oCode);\r\n      editableElement.appendChild(oPre);\r\n\r\n      this._document.execCommand(\"defaultParagraphSeparator\", false, \"div\");\r\n\r\n      this.modeVisual = false;\r\n      this.viewMode.emit(false);\r\n      oCode.focus();\r\n    } else {\r\n      if (this._document.all) {\r\n        editableElement.innerHTML = editableElement.innerText;\r\n      } else {\r\n        oContent = this._document.createRange();\r\n        oContent.selectNodeContents(editableElement.firstChild);\r\n        editableElement.innerHTML = oContent.toString();\r\n      }\r\n      editableElement.contentEditable = true;\r\n      this.modeVisual = true;\r\n      this.viewMode.emit(true);\r\n      this.onContentChange(editableElement.innerHTML);\r\n      editableElement.focus();\r\n    }\r\n    this.editorToolbar.setEditorMode(!this.modeVisual);\r\n  }\r\n\r\n  /**\r\n   * toggles editor buttons when cursor moved or positioning\r\n   *\r\n   * Send a node array from the contentEditable of the editor\r\n   */\r\n  exec() {\r\n    this.editorToolbar.triggerButtons();\r\n\r\n    let userSelection;\r\n    if (window.getSelection) {\r\n      userSelection = window.getSelection();\r\n    }\r\n\r\n    let a = userSelection.focusNode;\r\n    const els = [];\r\n    while (a && a.id !== 'editor') {\r\n      els.unshift(a);\r\n      a = a.parentNode;\r\n    }\r\n    this.editorToolbar.triggerBlocks(els);\r\n  }\r\n\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {AngularEditorComponent} from './angular-editor.component';\r\nimport {AngularEditorToolbarComponent} from \"./angular-editor-toolbar.component\";\r\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\r\nimport {CommonModule} from \"@angular/common\";\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule, FormsModule, ReactiveFormsModule\r\n  ],\r\n  declarations: [AngularEditorComponent, AngularEditorToolbarComponent],\r\n  exports: [AngularEditorComponent, AngularEditorToolbarComponent]\r\n})\r\nexport class AngularEditorModule {\r\n}\r\n"]}